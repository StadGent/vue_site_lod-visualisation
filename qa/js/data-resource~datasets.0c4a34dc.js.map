{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_fix-re-wks.js","webpack:///./src/mixins/detail-page.mixin.js","webpack:///./node_modules/core-js/modules/_strict-method.js","webpack:///./node_modules/util/util.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./src/components/organisms/datadl.vue?d803","webpack:///src/components/organisms/datadl.vue","webpack:///./src/components/organisms/datadl.vue?92de","webpack:///./src/components/organisms/datadl.vue","webpack:///./node_modules/core-js/modules/es6.array.sort.js","webpack:///./node_modules/markdown/lib/markdown.js","webpack:///./node_modules/markdown/lib/index.js","webpack:///./node_modules/core-js/modules/es6.regexp.replace.js","webpack:///./node_modules/util/support/isBufferBrowser.js"],"names":["hide","__webpack_require__","redefine","fails","defined","wks","module","exports","KEY","length","exec","SYMBOL","fns","strfn","rxfn","O","String","prototype","RegExp","string","arg","call","this","detailPageMixin","created","fetchData","watch","$route","methods","getTitle","predicates","i","dataset","o","value","setTitle","_setTitle","Object","_var_www_html_vue_site_lod_visualisation_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","title","sent","document","concat","stop","apply","arguments","tripleReducer","acc","triple","p","lastIndex","lastIndexOf","shortName","substr","push","method","global","process","formatRegExp","format","f","isString","objects","inspect","join","args","len","str","replace","x","Number","JSON","stringify","_","isNull","isObject","deprecate","fn","msg","isUndefined","noDeprecation","warned","deprecated","throwDeprecation","Error","traceDeprecation","console","trace","error","debugEnviron","debugs","obj","opts","ctx","seen","stylize","stylizeNoColor","depth","colors","isBoolean","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","style","styles","arrayToHash","array","hash","forEach","val","idx","recurseTimes","isFunction","constructor","ret","primitive","formatPrimitive","keys","visibleKeys","getOwnPropertyNames","isError","indexOf","formatError","name","isRegExp","toString","isDate","Date","output","base","braces","isArray","n","toUTCString","formatArray","map","key","formatProperty","pop","reduceToSingleString","simple","isNumber","l","hasOwnProperty","match","desc","getOwnPropertyDescriptor","get","set","split","line","reduce","cur","numLinesEst","ar","Array","isNullOrUndefined","isSymbol","re","objectToString","d","e","isPrimitive","pad","debuglog","VUE_APP_DIST","NODE_ENV","VUE_APP_SPARQL_ENDPOINT","VUE_APP_SUBDOMAIN","BASE_URL","NODE_DEBUG","toUpperCase","test","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","undefined","null","date","regexp","isBuffer","months","timestamp","time","getHours","getMinutes","getSeconds","getDate","getMonth","prop","log","inherits","origin","add","create","ctor","superCtor","super_","enumerable","writable","configurable","TempCtor","render","_vm","_h","$createElement","_c","_self","staticClass","_l","sortKeys","resource","index","isSubject","_v","attrs","getPredicate","_s","aria-hidden","isUri","href","getDataUri","getUri","domProps","innerHTML","getMarkdown","staticRenderFns","datadlvue_type_script_lang_js_","props","type","id","sort","a","b","object","s","lib","organisms_datadlvue_type_script_lang_js_","component","componentNormalizer","options","__file","__webpack_exports__","$export","aFunction","toObject","$sort","P","F","comparefn","expose","Markdown","dialect","dialects","Gruber","em_state","strong_state","debug_indent","mk_block_toSource","uneval","trailing","lineNumber","mk_block_inspect","util","parse","source","md","toTree","toHTML","input","toHTMLTree","renderJsonML","extract_attr","refs","references","html","convert_tree_to_html","merge_text_nodes","mk_block","block","trail","toSource","count_lines","strong_em","tag","state_slot","other_slot","CloseTag","len_after","text","orig_match","shift","other","slice","state","unshift","res","processInline","last","consumed","split_meta_hash","meta_string","meta","parts","in_quotes","letter","split_blocks","startLine","m","blocks","line_no","processBlock","cbs","ord","__order__","__call__","debug","inline","custom_root","old_tree","tree","print","loop_re_over_block","cb","valueOf","atxHeader","header","level","setextHeader","code","block_search","substring","horizRule","jsonml","lists","any_list","bullet_list","is_list_re","indent_re","regex_for_depth","expand_tab","li","loose","nl","add_to","what","is_str","get_contained_blocks","paragraphify","stack","list","last_li","splice","sublist","make_list","lines","li_accumulate","line_re","wanted_depth","Math","floor","found","indent","contained","next_block","hr","blockquote","abutting","processedBlock","attr","isEmpty","referenceDefn","ref","toLowerCase","para","__oneElement__","patterns_or_re","previous_nodes","__patterns__","patterns","out","]","}","__escape__","\\","charAt","![","alt","original","[","orig","DialectHelpers","inline_until_char","link","children","url","open_parens","<","`","  \n","buildBlockOrder","buildInlinePatterns","pattern","want","nodes","subclassDialect","Block","Inline","Maruku","processMetaHash","document_meta","pairs","block_meta","node","result","definition_list","tight","terms","defns","table","_split_on_unescaped","ch","r","leading_pipe","no_leading_pipe","html_attrs","align","trim","row","html_row","matches","before","k","arr","thisp","escapeHTML","render_tree","attributes","content","tag_attrs","preprocessTreeNode","src","root","markdown","REPLACE","$replace","searchValue","replaceValue","copy","fill","readUInt8"],"mappings":"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","file":"js/data-resource~datasets.0c4a34dc.js","sourcesContent":["'use strict';\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var fns = exec(defined, SYMBOL, ''[KEY]);\n  var strfn = fns[0];\n  var rxfn = fns[1];\n  if (fails(function () {\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  })) {\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n","export const detailPageMixin = {\n  created() {\n    this.fetchData()\n  },\n  watch: {\n    '$route': 'fetchData'\n  },\n  methods: {\n    getTitle () {\n      const predicates = ['prefLabel', 'label', 'title', 'name', 'firstName']\n      for (let i = 0; i < predicates.length; i++) {\n        if (this.dataset[predicates[i]]) {\n          return this.dataset[predicates[i]][0].o.value;\n        }\n      }\n      return 'detail view'\n    },\n    async setTitle () {\n      this.title = await this.getTitle()\n      document.title = `${this.title} | LOD`\n    },\n    tripleReducer(acc, triple) {\n      const p = triple.p.value\n      let lastIndex = p.lastIndexOf('#') > -1 ? p.lastIndexOf('#') : p.lastIndexOf('/')\n      let shortName = p.substr(lastIndex + 1)\n\n      if (!acc[shortName]) {\n        acc[shortName] = []\n      }\n      acc[shortName].push(triple)\n      return acc\n    }\n  }\n}","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('dl',{staticClass:\"dataset\"},[_vm._l((_vm.sortKeys(Object.keys(_vm.resource))),function(key,index){return [_c('dt',{key:(\"dt-\" + index)},[(_vm.isSubject(_vm.resource[key][0].o))?_c('span',[_vm._v(\"Is predicate \"),_c('abbr',{attrs:{\"title\":_vm.getPredicate(key)}},[_vm._v(_vm._s(key))]),_vm._v(\" of\")]):_c('span',[_vm._v(\"Has predicate \"),_c('abbr',{attrs:{\"title\":_vm.getPredicate(key)}},[_vm._v(_vm._s(key))])]),_c('div',{staticClass:\"predicate\",attrs:{\"aria-hidden\":\"true\"}},[_vm._v(_vm._s(_vm.getPredicate(key)))])]),_c('dd',{key:(\"dd-\" + index)},[(_vm.resource[key].length > 1)?_c('ul',_vm._l((_vm.resource[key]),function(triple,index){return _c('li',{key:(key + \"-\" + index)},[(_vm.isUri(triple.o))?_c('a',{staticClass:\"uri\",attrs:{\"href\":_vm.getDataUri(triple)}},[_vm._v(\"\\n                        \"+_vm._s(_vm.getUri(triple))+\"\\n                    \")]):_c('div',{domProps:{\"innerHTML\":_vm._s(_vm.getMarkdown(triple))}})])})):_vm._l((_vm.resource[key]),function(triple,index){return [(_vm.isUri(triple.o))?_c('a',{key:(key + \"-\" + index),staticClass:\"uri\",attrs:{\"href\":_vm.getDataUri(triple)}},[_vm._v(\"\\n                    \"+_vm._s(_vm.getUri(triple))+\"\\n                \")]):_c('div',{key:(key + \"-\" + index),domProps:{\"innerHTML\":_vm._s(_vm.getMarkdown(triple))}})]})],2)]})],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <dl class=\"dataset\">\n        <template v-for=\"(key,index) in sortKeys(Object.keys(resource))\">\n            <dt :key=\"`dt-${index}`\">\n                <span v-if=\"isSubject(resource[key][0].o)\">Is predicate <abbr :title=\"getPredicate(key)\">{{key}}</abbr> of</span>\n                <span v-else>Has predicate <abbr :title=\"getPredicate(key)\">{{key}}</abbr></span>\n                <div aria-hidden=\"true\" class=\"predicate\">{{getPredicate(key)}}</div>\n            </dt>\n            <dd :key=\"`dd-${index}`\">\n                <ul v-if=\"resource[key].length > 1\">\n                    <li v-for=\"(triple, index) in resource[key]\" :key=\"`${key}-${index}`\">\n                        <a class=\"uri\" v-if=\"isUri(triple.o)\"\n                           :href=\"getDataUri(triple)\">\n                            {{getUri(triple)}}\n                        </a>\n                        <div v-else v-html=\"getMarkdown(triple)\"></div>\n                    </li>\n                </ul>\n                <template v-else v-for=\"(triple, index) in resource[key]\">\n                    <a class=\"uri\" v-if=\"isUri(triple.o)\" :key=\"`${key}-${index}`\"\n                       :href=\"getDataUri(triple)\">\n                        {{getUri(triple)}}\n                    </a>\n                    <div v-else v-html=\"getMarkdown(triple)\" :key=\"`${key}-${index}`\"></div>\n                </template>\n            </dd>\n        </template>\n    </dl>\n</template>\n\n<script>\n  import * as markdown from 'markdown'\n\n  export default {\n    props: {\n      resource: {\n        type: Object\n      },\n      id: {\n        type: String\n      }\n    },\n    methods: {\n      sortKeys (keys) {\n        return keys.sort((a, b) => {\n          if (a > b) {\n            return 1\n          }\n          if (b > a) {\n            return -1\n          }\n          return 0\n        })\n      },\n      isSubject(object) {\n        return object.value === `https://${process.env.VUE_APP_SUBDOMAIN}stad.gent/id${this.id}`\n          || object.value === `http://${process.env.VUE_APP_SUBDOMAIN}stad.gent/id${this.id}`\n      },\n      isUri(object) {\n       return object.type === 'uri'\n      },\n      getUri(triple) {\n        return this.isSubject(triple.o) ? triple.s.value : triple.o.value\n      },\n      getDataUri(triple) {\n        return this.getUri(triple).replace('.gent/id/', '.gent/data/')\n      },\n      getMarkdown(triple) {\n        let value = (this.isSubject(triple.o) ? triple.s.value : triple.o.value) + ''\n        return markdown.parse(value);\n      },\n      getPredicate(key) {\n        return this.resource[key][0].p.value\n      }\n    }\n  }\n</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./datadl.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./datadl.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./datadl.vue?vue&type=template&id=61b86444&\"\nimport script from \"./datadl.vue?vue&type=script&lang=js&\"\nexport * from \"./datadl.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"datadl.vue\"\nexport default component.exports","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n\n(function( expose ) {\n\n/**\n *  class Markdown\n *\n *  Markdown processing in Javascript done right. We have very particular views\n *  on what constitutes 'right' which include:\n *\n *  - produces well-formed HTML (this means that em and strong nesting is\n *    important)\n *\n *  - has an intermediate representation to allow processing of parsed data (We\n *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n *\n *  - is easily extensible to add new dialects without having to rewrite the\n *    entire parsing mechanics\n *\n *  - has a good test suite\n *\n *  This implementation fulfills all of these (except that the test suite could\n *  do with expanding to automatically run all the fixtures from other Markdown\n *  implementations.)\n *\n *  ##### Intermediate Representation\n *\n *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n *\n *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n **/\nvar Markdown = expose.Markdown = function(dialect) {\n  switch (typeof dialect) {\n    case \"undefined\":\n      this.dialect = Markdown.dialects.Gruber;\n      break;\n    case \"object\":\n      this.dialect = dialect;\n      break;\n    default:\n      if ( dialect in Markdown.dialects ) {\n        this.dialect = Markdown.dialects[dialect];\n      }\n      else {\n        throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n      }\n      break;\n  }\n  this.em_state = [];\n  this.strong_state = [];\n  this.debug_indent = \"\";\n};\n\n/**\n *  parse( markdown, [dialect] ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *\n *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n **/\nexpose.parse = function( source, dialect ) {\n  // dialect will default if undefined\n  var md = new Markdown( dialect );\n  return md.toTree( source );\n};\n\n/**\n *  toHTML( markdown, [dialect]  ) -> String\n *  toHTML( md_tree ) -> String\n *  - markdown (String): markdown string to parse\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Take markdown (either as a string or as a JsonML tree) and run it through\n *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n **/\nexpose.toHTML = function toHTML( source , dialect , options ) {\n  var input = expose.toHTMLTree( source , dialect , options );\n\n  return expose.renderJsonML( input );\n};\n\n/**\n *  toHTMLTree( markdown, [dialect] ) -> JsonML\n *  toHTMLTree( md_tree ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n *  to this function, it is first parsed into a markdown tree by calling\n *  [[parse]].\n **/\nexpose.toHTMLTree = function toHTMLTree( input, dialect , options ) {\n  // convert string input to an MD tree\n  if ( typeof input ===\"string\" ) input = this.parse( input, dialect );\n\n  // Now convert the MD tree to an HTML tree\n\n  // remove references from the tree\n  var attrs = extract_attr( input ),\n      refs = {};\n\n  if ( attrs && attrs.references ) {\n    refs = attrs.references;\n  }\n\n  var html = convert_tree_to_html( input, refs , options );\n  merge_text_nodes( html );\n  return html;\n};\n\n// For Spidermonkey based engines\nfunction mk_block_toSource() {\n  return \"Markdown.mk_block( \" +\n          uneval(this.toString()) +\n          \", \" +\n          uneval(this.trailing) +\n          \", \" +\n          uneval(this.lineNumber) +\n          \" )\";\n}\n\n// node\nfunction mk_block_inspect() {\n  var util = require(\"util\");\n  return \"Markdown.mk_block( \" +\n          util.inspect(this.toString()) +\n          \", \" +\n          util.inspect(this.trailing) +\n          \", \" +\n          util.inspect(this.lineNumber) +\n          \" )\";\n\n}\n\nvar mk_block = Markdown.mk_block = function(block, trail, line) {\n  // Be helpful for default case in tests.\n  if ( arguments.length == 1 ) trail = \"\\n\\n\";\n\n  var s = new String(block);\n  s.trailing = trail;\n  // To make it clear its not just a string\n  s.inspect = mk_block_inspect;\n  s.toSource = mk_block_toSource;\n\n  if ( line != undefined )\n    s.lineNumber = line;\n\n  return s;\n};\n\nfunction count_lines( str ) {\n  var n = 0, i = -1;\n  while ( ( i = str.indexOf(\"\\n\", i + 1) ) !== -1 ) n++;\n  return n;\n}\n\n// Internal - split source into rough blocks\nMarkdown.prototype.split_blocks = function splitBlocks( input, startLine ) {\n  input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\n  // [\\s\\S] matches _anything_ (newline or space)\n  // [^] is equivalent but doesn't work in IEs.\n  var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n      blocks = [],\n      m;\n\n  var line_no = 1;\n\n  if ( ( m = /^(\\s*\\n)/.exec(input) ) != null ) {\n    // skip (but count) leading blank lines\n    line_no += count_lines( m[0] );\n    re.lastIndex = m[0].length;\n  }\n\n  while ( ( m = re.exec(input) ) !== null ) {\n    if (m[2] == \"\\n#\") {\n      m[2] = \"\\n\";\n      re.lastIndex--;\n    }\n    blocks.push( mk_block( m[1], m[2], line_no ) );\n    line_no += count_lines( m[0] );\n  }\n\n  return blocks;\n};\n\n/**\n *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n *  - block (String): the block to process\n *  - next (Array): the following blocks\n *\n * Process `block` and return an array of JsonML nodes representing `block`.\n *\n * It does this by asking each block level function in the dialect to process\n * the block until one can. Succesful handling is indicated by returning an\n * array (with zero or more JsonML nodes), failure by a false value.\n *\n * Blocks handlers are responsible for calling [[Markdown#processInline]]\n * themselves as appropriate.\n *\n * If the blocks were split incorrectly or adjacent blocks need collapsing you\n * can adjust `next` in place using shift/splice etc.\n *\n * If any of this default behaviour is not right for the dialect, you can\n * define a `__call__` method on the dialect that will get invoked to handle\n * the block processing.\n */\nMarkdown.prototype.processBlock = function processBlock( block, next ) {\n  var cbs = this.dialect.block,\n      ord = cbs.__order__;\n\n  if ( \"__call__\" in cbs ) {\n    return cbs.__call__.call(this, block, next);\n  }\n\n  for ( var i = 0; i < ord.length; i++ ) {\n    //D:this.debug( \"Testing\", ord[i] );\n    var res = cbs[ ord[i] ].call( this, block, next );\n    if ( res ) {\n      //D:this.debug(\"  matched\");\n      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )\n        this.debug(ord[i], \"didn't return a proper array\");\n      //D:this.debug( \"\" );\n      return res;\n    }\n  }\n\n  // Uhoh! no match! Should we throw an error?\n  return [];\n};\n\nMarkdown.prototype.processInline = function processInline( block ) {\n  return this.dialect.inline.__call__.call( this, String( block ) );\n};\n\n/**\n *  Markdown#toTree( source ) -> JsonML\n *  - source (String): markdown source to parse\n *\n *  Parse `source` into a JsonML tree representing the markdown document.\n **/\n// custom_tree means set this.tree to `custom_tree` and restore old value on return\nMarkdown.prototype.toTree = function toTree( source, custom_root ) {\n  var blocks = source instanceof Array ? source : this.split_blocks( source );\n\n  // Make tree a member variable so its easier to mess with in extensions\n  var old_tree = this.tree;\n  try {\n    this.tree = custom_root || this.tree || [ \"markdown\" ];\n\n    blocks:\n    while ( blocks.length ) {\n      var b = this.processBlock( blocks.shift(), blocks );\n\n      // Reference blocks and the like won't return any content\n      if ( !b.length ) continue blocks;\n\n      this.tree.push.apply( this.tree, b );\n    }\n    return this.tree;\n  }\n  finally {\n    if ( custom_root ) {\n      this.tree = old_tree;\n    }\n  }\n};\n\n// Noop by default\nMarkdown.prototype.debug = function () {\n  var args = Array.prototype.slice.call( arguments);\n  args.unshift(this.debug_indent);\n  if ( typeof print !== \"undefined\" )\n      print.apply( print, args );\n  if ( typeof console !== \"undefined\" && typeof console.log !== \"undefined\" )\n      console.log.apply( null, args );\n}\n\nMarkdown.prototype.loop_re_over_block = function( re, block, cb ) {\n  // Dont use /g regexps with this\n  var m,\n      b = block.valueOf();\n\n  while ( b.length && (m = re.exec(b) ) != null ) {\n    b = b.substr( m[0].length );\n    cb.call(this, m);\n  }\n  return b;\n};\n\n/**\n * Markdown.dialects\n *\n * Namespace of built-in dialects.\n **/\nMarkdown.dialects = {};\n\n/**\n * Markdown.dialects.Gruber\n *\n * The default dialect that follows the rules set out by John Gruber's\n * markdown.pl as closely as possible. Well actually we follow the behaviour of\n * that script which in some places is not exactly what the syntax web page\n * says.\n **/\nMarkdown.dialects.Gruber = {\n  block: {\n    atxHeader: function atxHeader( block, next ) {\n      var m = block.match( /^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var header = [ \"header\", { level: m[ 1 ].length } ];\n      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    setextHeader: function setextHeader( block, next ) {\n      var m = block.match( /^(.*)\\n([-=])\\2\\2+(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var level = ( m[ 2 ] === \"=\" ) ? 1 : 2;\n      var header = [ \"header\", { level : level }, m[ 1 ] ];\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    code: function code( block, next ) {\n      // |    Foo\n      // |bar\n      // should be a code block followed by a paragraph. Fun\n      //\n      // There might also be adjacent code block to merge.\n\n      var ret = [],\n          re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n          lines;\n\n      // 4 spaces + content\n      if ( !block.match( re ) ) return undefined;\n\n      block_search:\n      do {\n        // Now pull out the rest of the lines\n        var b = this.loop_re_over_block(\n                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );\n\n        if ( b.length ) {\n          // Case alluded to in first comment. push it back on as a new block\n          next.unshift( mk_block(b, block.trailing) );\n          break block_search;\n        }\n        else if ( next.length ) {\n          // Check the next block - it might be code too\n          if ( !next[0].match( re ) ) break block_search;\n\n          // Pull how how many blanks lines follow - minus two to account for .join\n          ret.push ( block.trailing.replace(/[^\\n]/g, \"\").substring(2) );\n\n          block = next.shift();\n        }\n        else {\n          break block_search;\n        }\n      } while ( true );\n\n      return [ [ \"code_block\", ret.join(\"\\n\") ] ];\n    },\n\n    horizRule: function horizRule( block, next ) {\n      // this needs to find any hr in the block to handle abutting blocks\n      var m = block.match( /^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/ );\n\n      if ( !m ) {\n        return undefined;\n      }\n\n      var jsonml = [ [ \"hr\" ] ];\n\n      // if there's a leading abutting block, process it\n      if ( m[ 1 ] ) {\n        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );\n      }\n\n      // if there's a trailing abutting block, stick it into next\n      if ( m[ 3 ] ) {\n        next.unshift( mk_block( m[ 3 ] ) );\n      }\n\n      return jsonml;\n    },\n\n    // There are two types of lists. Tight and loose. Tight lists have no whitespace\n    // between the items (and result in text just in the <li>) and loose lists,\n    // which have an empty line between list items, resulting in (one or more)\n    // paragraphs inside the <li>.\n    //\n    // There are all sorts weird edge cases about the original markdown.pl's\n    // handling of lists:\n    //\n    // * Nested lists are supposed to be indented by four chars per level. But\n    //   if they aren't, you can get a nested list by indenting by less than\n    //   four so long as the indent doesn't match an indent of an existing list\n    //   item in the 'nest stack'.\n    //\n    // * The type of the list (bullet or number) is controlled just by the\n    //    first item at the indent. Subsequent changes are ignored unless they\n    //    are for nested lists\n    //\n    lists: (function( ) {\n      // Use a closure to hide a few variables.\n      var any_list = \"[*+-]|\\\\d+\\\\.\",\n          bullet_list = /[*+-]/,\n          number_list = /\\d+\\./,\n          // Capture leading indent as it matters for determining nested lists.\n          is_list_re = new RegExp( \"^( {0,3})(\" + any_list + \")[ \\t]+\" ),\n          indent_re = \"(?: {0,3}\\\\t| {4})\";\n\n      // TODO: Cache this regexp for certain depths.\n      // Create a regexp suitable for matching an li for a given stack depth\n      function regex_for_depth( depth ) {\n\n        return new RegExp(\n          // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" +\n          // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth-1) + \"}[ ]{0,4})\"\n        );\n      }\n      function expand_tab( input ) {\n        return input.replace( / {0,3}\\t/g, \"    \" );\n      }\n\n      // Add inline content `inline` to `li`. inline comes from processInline\n      // so is an array of content\n      function add(li, loose, inline, nl) {\n        if ( loose ) {\n          li.push( [ \"para\" ].concat(inline) );\n          return;\n        }\n        // Hmmm, should this be any block level element or just paras?\n        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == \"para\"\n                   ? li[li.length -1]\n                   : li;\n\n        // If there is already some content in this list, add the new line in\n        if ( nl && li.length > 1 ) inline.unshift(nl);\n\n        for ( var i = 0; i < inline.length; i++ ) {\n          var what = inline[i],\n              is_str = typeof what == \"string\";\n          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == \"string\" ) {\n            add_to[ add_to.length-1 ] += what;\n          }\n          else {\n            add_to.push( what );\n          }\n        }\n      }\n\n      // contained means have an indent greater than the current one. On\n      // *every* line in the block\n      function get_contained_blocks( depth, blocks ) {\n\n        var re = new RegExp( \"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\" ),\n            replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n            ret = [];\n\n        while ( blocks.length > 0 ) {\n          if ( re.exec( blocks[0] ) ) {\n            var b = blocks.shift(),\n                // Now remove that indent\n                x = b.replace( replace, \"\");\n\n            ret.push( mk_block( x, b.trailing, b.lineNumber ) );\n          }\n          else {\n            break;\n          }\n        }\n        return ret;\n      }\n\n      // passed to stack.forEach to turn list items up the stack into paras\n      function paragraphify(s, i, stack) {\n        var list = s.list;\n        var last_li = list[list.length-1];\n\n        if ( last_li[1] instanceof Array && last_li[1][0] == \"para\" ) {\n          return;\n        }\n        if ( i + 1 == stack.length ) {\n          // Last stack frame\n          // Keep the same array, but replace the contents\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ) );\n        }\n        else {\n          var sublist = last_li.pop();\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ), sublist );\n        }\n      }\n\n      // The matcher function\n      return function( block, next ) {\n        var m = block.match( is_list_re );\n        if ( !m ) return undefined;\n\n        function make_list( m ) {\n          var list = bullet_list.exec( m[2] )\n                   ? [\"bulletlist\"]\n                   : [\"numberlist\"];\n\n          stack.push( { list: list, indent: m[1] } );\n          return list;\n        }\n\n\n        var stack = [], // Stack of lists for nesting.\n            list = make_list( m ),\n            last_li,\n            loose = false,\n            ret = [ stack[0].list ],\n            i;\n\n        // Loop to search over block looking for inner block elements and loose lists\n        loose_search:\n        while ( true ) {\n          // Split into lines preserving new lines at end of line\n          var lines = block.split( /(?=\\n)/ );\n\n          // We have to grab all lines for a li and call processInline on them\n          // once as there are some inline things that can span lines.\n          var li_accumulate = \"\";\n\n          // Loop over the lines in this block looking for tight lists.\n          tight_search:\n          for ( var line_no = 0; line_no < lines.length; line_no++ ) {\n            var nl = \"\",\n                l = lines[line_no].replace(/^\\n/, function(n) { nl = n; return \"\"; });\n\n            // TODO: really should cache this\n            var line_re = regex_for_depth( stack.length );\n\n            m = l.match( line_re );\n            //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n\n            // We have a list item\n            if ( m[1] !== undefined ) {\n              // Process the previous list item, if any\n              if ( li_accumulate.length ) {\n                add( last_li, loose, this.processInline( li_accumulate ), nl );\n                // Loose mode will have been dealt with. Reset it\n                loose = false;\n                li_accumulate = \"\";\n              }\n\n              m[1] = expand_tab( m[1] );\n              var wanted_depth = Math.floor(m[1].length/4)+1;\n              //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n              if ( wanted_depth > stack.length ) {\n                // Deep enough for a nested list outright\n                //print ( \"new nested list\" );\n                list = make_list( m );\n                last_li.push( list );\n                last_li = list[1] = [ \"listitem\" ];\n              }\n              else {\n                // We aren't deep enough to be strictly a new level. This is\n                // where Md.pl goes nuts. If the indent matches a level in the\n                // stack, put it there, else put it one deeper then the\n                // wanted_depth deserves.\n                var found = false;\n                for ( i = 0; i < stack.length; i++ ) {\n                  if ( stack[ i ].indent != m[1] ) continue;\n                  list = stack[ i ].list;\n                  stack.splice( i+1, stack.length - (i+1) );\n                  found = true;\n                  break;\n                }\n\n                if (!found) {\n                  //print(\"not found. l:\", uneval(l));\n                  wanted_depth++;\n                  if ( wanted_depth <= stack.length ) {\n                    stack.splice(wanted_depth, stack.length - wanted_depth);\n                    //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n                    list = stack[wanted_depth-1].list;\n                    //print(\"list:\", uneval(list) );\n                  }\n                  else {\n                    //print (\"made new stack for messy indent\");\n                    list = make_list(m);\n                    last_li.push(list);\n                  }\n                }\n\n                //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n                last_li = [ \"listitem\" ];\n                list.push(last_li);\n              } // end depth of shenegains\n              nl = \"\";\n            }\n\n            // Add content\n            if ( l.length > m[0].length ) {\n              li_accumulate += nl + l.substr( m[0].length );\n            }\n          } // tight_search\n\n          if ( li_accumulate.length ) {\n            add( last_li, loose, this.processInline( li_accumulate ), nl );\n            // Loose mode will have been dealt with. Reset it\n            loose = false;\n            li_accumulate = \"\";\n          }\n\n          // Look at the next block - we might have a loose list. Or an extra\n          // paragraph for the current li\n          var contained = get_contained_blocks( stack.length, next );\n\n          // Deal with code blocks or properly nested lists\n          if ( contained.length > 0 ) {\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            last_li.push.apply( last_li, this.toTree( contained, [] ) );\n          }\n\n          var next_block = next[0] && next[0].valueOf() || \"\";\n\n          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {\n            block = next.shift();\n\n            // Check for an HR following a list: features/lists/hr_abutting\n            var hr = this.dialect.block.horizRule( block, next );\n\n            if ( hr ) {\n              ret.push.apply(ret, hr);\n              break;\n            }\n\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            loose = true;\n            continue loose_search;\n          }\n          break;\n        } // loose_search\n\n        return ret;\n      };\n    })(),\n\n    blockquote: function blockquote( block, next ) {\n      if ( !block.match( /^>/m ) )\n        return undefined;\n\n      var jsonml = [];\n\n      // separate out the leading abutting block, if any. I.e. in this case:\n      //\n      //  a\n      //  > b\n      //\n      if ( block[ 0 ] != \">\" ) {\n        var lines = block.split( /\\n/ ),\n            prev = [],\n            line_no = block.lineNumber;\n\n        // keep shifting lines until you find a crotchet\n        while ( lines.length && lines[ 0 ][ 0 ] != \">\" ) {\n            prev.push( lines.shift() );\n            line_no++;\n        }\n\n        var abutting = mk_block( prev.join( \"\\n\" ), \"\\n\", block.lineNumber );\n        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );\n        // reassemble new block of just block quotes!\n        block = mk_block( lines.join( \"\\n\" ), block.trailing, line_no );\n      }\n\n\n      // if the next block is also a blockquote merge it in\n      while ( next.length && next[ 0 ][ 0 ] == \">\" ) {\n        var b = next.shift();\n        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );\n      }\n\n      // Strip off the leading \"> \" and re-process as a block.\n      var input = block.replace( /^> ?/gm, \"\" ),\n          old_tree = this.tree,\n          processedBlock = this.toTree( input, [ \"blockquote\" ] ),\n          attr = extract_attr( processedBlock );\n\n      // If any link references were found get rid of them\n      if ( attr && attr.references ) {\n        delete attr.references;\n        // And then remove the attribute object if it's empty\n        if ( isEmpty( attr ) ) {\n          processedBlock.splice( 1, 1 );\n        }\n      }\n\n      jsonml.push( processedBlock );\n      return jsonml;\n    },\n\n    referenceDefn: function referenceDefn( block, next) {\n      var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/;\n      // interesting matches are [ , ref_id, url, , title, title ]\n\n      if ( !block.match(re) )\n        return undefined;\n\n      // make an attribute node if it doesn't exist\n      if ( !extract_attr( this.tree ) ) {\n        this.tree.splice( 1, 0, {} );\n      }\n\n      var attrs = extract_attr( this.tree );\n\n      // make a references hash if it doesn't exist\n      if ( attrs.references === undefined ) {\n        attrs.references = {};\n      }\n\n      var b = this.loop_re_over_block(re, block, function( m ) {\n\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        var ref = attrs.references[ m[1].toLowerCase() ] = {\n          href: m[2]\n        };\n\n        if ( m[4] !== undefined )\n          ref.title = m[4];\n        else if ( m[5] !== undefined )\n          ref.title = m[5];\n\n      } );\n\n      if ( b.length )\n        next.unshift( mk_block( b, block.trailing ) );\n\n      return [];\n    },\n\n    para: function para( block, next ) {\n      // everything's a para!\n      return [ [\"para\"].concat( this.processInline( block ) ) ];\n    }\n  }\n};\n\nMarkdown.dialects.Gruber.inline = {\n\n    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {\n      var m,\n          res,\n          lastIndex = 0;\n\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp( \"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\" );\n\n      m = re.exec( text );\n      if (!m) {\n        // Just boring text\n        return [ text.length, text ];\n      }\n      else if ( m[1] ) {\n        // Some un-interesting text matched. Return that first\n        return [ m[1].length, m[1] ];\n      }\n\n      var res;\n      if ( m[2] in this.dialect.inline ) {\n        res = this.dialect.inline[ m[2] ].call(\n                  this,\n                  text.substr( m.index ), m, previous_nodes || [] );\n      }\n      // Default for now to make dev easier. just slurp special and output it.\n      res = res || [ m[2].length, m[2] ];\n      return res;\n    },\n\n    __call__: function inline( text, patterns ) {\n\n      var out = [],\n          res;\n\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if ( typeof x == \"string\" && typeof out[out.length-1] == \"string\" )\n          out[ out.length-1 ] += x;\n        else\n          out.push(x);\n      }\n\n      while ( text.length > 0 ) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );\n        text = text.substr( res.shift() );\n        forEach(res, add )\n      }\n\n      return out;\n    },\n\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n\n    __escape__ : /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n\n    \"\\\\\": function escaped( text ) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if ( this.dialect.inline.__escape__.exec( text ) )\n        return [ 2, text.charAt( 1 ) ];\n      else\n        // Not an esacpe\n        return [ 1, \"\\\\\" ];\n    },\n\n    \"![\": function image( text ) {\n\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match( /^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/ );\n\n      if ( m ) {\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\\\/ )[0];\n\n        var attrs = { alt: m[1], href: m[2] || \"\" };\n        if ( m[4] !== undefined)\n          attrs.title = m[4];\n\n        return [ m[0].length, [ \"img\", attrs ] ];\n      }\n\n      // ![Alt text][id]\n      m = text.match( /^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/ );\n\n      if ( m ) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [ m[0].length, [ \"img_ref\", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];\n      }\n\n      // Just consume the '!['\n      return [ 2, \"![\" ];\n    },\n\n    \"[\": function link( text ) {\n\n      var orig = String(text);\n      // Inline content is possible inside `link text`\n      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), \"]\" );\n\n      // No closing ']' found. Just consume the [\n      if ( !res ) return [ 1, \"[\" ];\n\n      var consumed = 1 + res[ 0 ],\n          children = res[ 1 ],\n          link,\n          attrs;\n\n      // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n      text = text.substr( consumed );\n\n      // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n      var m = text.match( /^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/ );\n      if ( m ) {\n        var url = m[1];\n        consumed += m[0].length;\n\n        if ( url && url[0] == \"<\" && url[url.length-1] == \">\" )\n          url = url.substring( 1, url.length - 1 );\n\n        // If there is a title we don't have to worry about parens in the url\n        if ( !m[3] ) {\n          var open_parens = 1; // One open that isn't in the capture\n          for ( var len = 0; len < url.length; len++ ) {\n            switch ( url[len] ) {\n            case \"(\":\n              open_parens++;\n              break;\n            case \")\":\n              if ( --open_parens == 0) {\n                consumed -= url.length - len;\n                url = url.substring(0, len);\n              }\n              break;\n            }\n          }\n        }\n\n        // Process escapes only\n        url = this.dialect.inline.__call__.call( this, url, /\\\\/ )[0];\n\n        attrs = { href: url || \"\" };\n        if ( m[3] !== undefined)\n          attrs.title = m[3];\n\n        link = [ \"link\", attrs ].concat( children );\n        return [ consumed, link ];\n      }\n\n      // [Alt text][id]\n      // [Alt text] [id]\n      m = text.match( /^\\s*\\[(.*?)\\]/ );\n\n      if ( m ) {\n\n        consumed += m[ 0 ].length;\n\n        // [links][] uses links as its reference\n        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };\n\n        link = [ \"link_ref\", attrs ].concat( children );\n\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n        return [ consumed, link ];\n      }\n\n      // [id]\n      // Only if id is plain (no formatting.)\n      if ( children.length == 1 && typeof children[0] == \"string\" ) {\n\n        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };\n        link = [ \"link_ref\", attrs, children[0] ];\n        return [ consumed, link ];\n      }\n\n      // Just consume the \"[\"\n      return [ 1, \"[\" ];\n    },\n\n\n    \"<\": function autoLink( text ) {\n      var m;\n\n      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/ ) ) != null ) {\n        if ( m[3] ) {\n          return [ m[0].length, [ \"link\", { href: \"mailto:\" + m[3] }, m[3] ] ];\n\n        }\n        else if ( m[2] == \"mailto\" ) {\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1].substr(\"mailto:\".length ) ] ];\n        }\n        else\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1] ] ];\n      }\n\n      return [ 1, \"<\" ];\n    },\n\n    \"`\": function inlineCode( text ) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match( /(`+)(([\\s\\S]*?)\\1)/ );\n\n      if ( m && m[2] )\n        return [ m[1].length + m[2].length, [ \"inlinecode\", m[3] ] ];\n      else {\n        // TODO: No matching end code found - warn!\n        return [ 1, \"`\" ];\n      }\n    },\n\n    \"  \\n\": function lineBreak( text ) {\n      return [ 3, [ \"linebreak\" ] ];\n    }\n\n};\n\n// Meta Helper/generator method for em and strong handling\nfunction strong_em( tag, md ) {\n\n  var state_slot = tag + \"_state\",\n      other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n\n  function CloseTag(len) {\n    this.len_after = len;\n    this.name = \"close_\" + md;\n  }\n\n  return function ( text, orig_match ) {\n\n    if ( this[state_slot][0] == md ) {\n      // Most recent em is of this type\n      //D:this.debug(\"closing\", md);\n      this[state_slot].shift();\n\n      // \"Consume\" everything to go back to the recrusion in the else-block below\n      return[ text.length, new CloseTag(text.length-md.length) ];\n    }\n    else {\n      // Store a clone of the em/strong states\n      var other = this[other_slot].slice(),\n          state = this[state_slot].slice();\n\n      this[state_slot].unshift(md);\n\n      //D:this.debug_indent += \"  \";\n\n      // Recurse\n      var res = this.processInline( text.substr( md.length ) );\n      //D:this.debug_indent = this.debug_indent.substr(2);\n\n      var last = res[res.length - 1];\n\n      //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n      var check = this[state_slot].shift();\n      if ( last instanceof CloseTag ) {\n        res.pop();\n        // We matched! Huzzah.\n        var consumed = text.length - last.len_after;\n        return [ consumed, [ tag ].concat(res) ];\n      }\n      else {\n        // Restore the state of the other kind. We might have mistakenly closed it.\n        this[other_slot] = other;\n        this[state_slot] = state;\n\n        // We can't reuse the processed result as it could have wrong parsing contexts in it.\n        return [ md.length, md ];\n      }\n    }\n  }; // End returned function\n}\n\nMarkdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\nMarkdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\nMarkdown.dialects.Gruber.inline[\"*\"]  = strong_em(\"em\", \"*\");\nMarkdown.dialects.Gruber.inline[\"_\"]  = strong_em(\"em\", \"_\");\n\n\n// Build default order from insertion order.\nMarkdown.buildBlockOrder = function(d) {\n  var ord = [];\n  for ( var i in d ) {\n    if ( i == \"__order__\" || i == \"__call__\" ) continue;\n    ord.push( i );\n  }\n  d.__order__ = ord;\n};\n\n// Build patterns for inline matcher\nMarkdown.buildInlinePatterns = function(d) {\n  var patterns = [];\n\n  for ( var i in d ) {\n    // __foo__ is reserved and not a pattern\n    if ( i.match( /^__.*__$/) ) continue;\n    var l = i.replace( /([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\" )\n             .replace( /\\n/, \"\\\\n\" );\n    patterns.push( i.length == 1 ? l : \"(?:\" + l + \")\" );\n  }\n\n  patterns = patterns.join(\"|\");\n  d.__patterns__ = patterns;\n  //print(\"patterns:\", uneval( patterns ) );\n\n  var fn = d.__call__;\n  d.__call__ = function(text, pattern) {\n    if ( pattern != undefined ) {\n      return fn.call(this, text, pattern);\n    }\n    else\n    {\n      return fn.call(this, text, patterns);\n    }\n  };\n};\n\nMarkdown.DialectHelpers = {};\nMarkdown.DialectHelpers.inline_until_char = function( text, want ) {\n  var consumed = 0,\n      nodes = [];\n\n  while ( true ) {\n    if ( text.charAt( consumed ) == want ) {\n      // Found the character we were looking for\n      consumed++;\n      return [ consumed, nodes ];\n    }\n\n    if ( consumed >= text.length ) {\n      // No closing char found. Abort.\n      return null;\n    }\n\n    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );\n    consumed += res[ 0 ];\n    // Add any returned nodes.\n    nodes.push.apply( nodes, res.slice( 1 ) );\n  }\n}\n\n// Helper function to make sub-classing a dialect easier\nMarkdown.subclassDialect = function( d ) {\n  function Block() {}\n  Block.prototype = d.block;\n  function Inline() {}\n  Inline.prototype = d.inline;\n\n  return { block: new Block(), inline: new Inline() };\n};\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Gruber.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );\n\nMarkdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );\n\nMarkdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {\n  var meta = split_meta_hash( meta_string ),\n      attr = {};\n\n  for ( var i = 0; i < meta.length; ++i ) {\n    // id: #foo\n    if ( /^#/.test( meta[ i ] ) ) {\n      attr.id = meta[ i ].substring( 1 );\n    }\n    // class: .foo\n    else if ( /^\\./.test( meta[ i ] ) ) {\n      // if class already exists, append the new one\n      if ( attr[\"class\"] ) {\n        attr[\"class\"] = attr[\"class\"] + meta[ i ].replace( /./, \" \" );\n      }\n      else {\n        attr[\"class\"] = meta[ i ].substring( 1 );\n      }\n    }\n    // attribute: foo=bar\n    else if ( /\\=/.test( meta[ i ] ) ) {\n      var s = meta[ i ].split( /\\=/ );\n      attr[ s[ 0 ] ] = s[ 1 ];\n    }\n  }\n\n  return attr;\n}\n\nfunction split_meta_hash( meta_string ) {\n  var meta = meta_string.split( \"\" ),\n      parts = [ \"\" ],\n      in_quotes = false;\n\n  while ( meta.length ) {\n    var letter = meta.shift();\n    switch ( letter ) {\n      case \" \" :\n        // if we're in a quoted section, keep it\n        if ( in_quotes ) {\n          parts[ parts.length - 1 ] += letter;\n        }\n        // otherwise make a new part\n        else {\n          parts.push( \"\" );\n        }\n        break;\n      case \"'\" :\n      case '\"' :\n        // reverse the quotes and move straight on\n        in_quotes = !in_quotes;\n        break;\n      case \"\\\\\" :\n        // shift off the next letter to be used straight away.\n        // it was escaped so we'll keep it whatever it is\n        letter = meta.shift();\n      default :\n        parts[ parts.length - 1 ] += letter;\n        break;\n    }\n  }\n\n  return parts;\n}\n\nMarkdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {\n  // we're only interested in the first block\n  if ( block.lineNumber > 1 ) return undefined;\n\n  // document_meta blocks consist of one or more lines of `Key: Value\\n`\n  if ( ! block.match( /^(?:\\w+:.*\\n)*\\w+:.*$/ ) ) return undefined;\n\n  // make an attribute node if it doesn't exist\n  if ( !extract_attr( this.tree ) ) {\n    this.tree.splice( 1, 0, {} );\n  }\n\n  var pairs = block.split( /\\n/ );\n  for ( p in pairs ) {\n    var m = pairs[ p ].match( /(\\w+):\\s*(.*)$/ ),\n        key = m[ 1 ].toLowerCase(),\n        value = m[ 2 ];\n\n    this.tree[ 1 ][ key ] = value;\n  }\n\n  // document_meta produces no content!\n  return [];\n};\n\nMarkdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {\n  // check if the last line of the block is an meta hash\n  var m = block.match( /(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/ );\n  if ( !m ) return undefined;\n\n  // process the meta hash\n  var attr = this.dialect.processMetaHash( m[ 2 ] );\n\n  var hash;\n\n  // if we matched ^ then we need to apply meta to the previous block\n  if ( m[ 1 ] === \"\" ) {\n    var node = this.tree[ this.tree.length - 1 ];\n    hash = extract_attr( node );\n\n    // if the node is a string (rather than JsonML), bail\n    if ( typeof node === \"string\" ) return undefined;\n\n    // create the attribute hash if it doesn't exist\n    if ( !hash ) {\n      hash = {};\n      node.splice( 1, 0, hash );\n    }\n\n    // add the attributes in\n    for ( a in attr ) {\n      hash[ a ] = attr[ a ];\n    }\n\n    // return nothing so the meta hash is removed\n    return [];\n  }\n\n  // pull the meta hash off the block and process what's left\n  var b = block.replace( /\\n.*$/, \"\" ),\n      result = this.processBlock( b, [] );\n\n  // get or make the attributes hash\n  hash = extract_attr( result[ 0 ] );\n  if ( !hash ) {\n    hash = {};\n    result[ 0 ].splice( 1, 0, hash );\n  }\n\n  // attach the attributes to the block\n  for ( a in attr ) {\n    hash[ a ] = attr[ a ];\n  }\n\n  return result;\n};\n\nMarkdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {\n  // one or more terms followed by one or more definitions, in a single block\n  var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n      list = [ \"dl\" ],\n      i, m;\n\n  // see if we're dealing with a tight or loose block\n  if ( ( m = block.match( tight ) ) ) {\n    // pull subsequent tight DL blocks out of `next`\n    var blocks = [ block ];\n    while ( next.length && tight.exec( next[ 0 ] ) ) {\n      blocks.push( next.shift() );\n    }\n\n    for ( var b = 0; b < blocks.length; ++b ) {\n      var m = blocks[ b ].match( tight ),\n          terms = m[ 1 ].replace( /\\n$/, \"\" ).split( /\\n/ ),\n          defns = m[ 2 ].split( /\\n:\\s+/ );\n\n      // print( uneval( m ) );\n\n      for ( i = 0; i < terms.length; ++i ) {\n        list.push( [ \"dt\", terms[ i ] ] );\n      }\n\n      for ( i = 0; i < defns.length; ++i ) {\n        // run inline processing over the definition\n        list.push( [ \"dd\" ].concat( this.processInline( defns[ i ].replace( /(\\n)\\s+/, \"$1\" ) ) ) );\n      }\n    }\n  }\n  else {\n    return undefined;\n  }\n\n  return [ list ];\n};\n\n// splits on unescaped instances of @ch. If @ch is not a character the result\n// can be unpredictable\n\nMarkdown.dialects.Maruku.block.table = function table (block, next) {\n\n    var _split_on_unescaped = function(s, ch) {\n        ch = ch || '\\\\s';\n        if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) { ch = '\\\\' + ch; }\n        var res = [ ],\n            r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n            m;\n        while(m = s.match(r)) {\n            res.push(m[1]);\n            s = m[2];\n        }\n        res.push(s);\n        return res;\n    }\n\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        // find at least an unescaped pipe in each line\n        no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        i, m;\n    if (m = block.match(leading_pipe)) {\n        // remove leading pipes in contents\n        // (header and horizontal rule already have the leading pipe left out)\n        m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (! ( m = block.match(no_leading_pipe))) {\n        return undefined;\n    }\n\n    var table = [ \"table\", [ \"thead\", [ \"tr\" ] ], [ \"tbody\" ] ];\n\n    // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|');\n\n    // process alignment\n    var html_attrs = [ ];\n    forEach (m[2], function (s) {\n        if (s.match(/^\\s*-+:\\s*$/))       html_attrs.push({align: \"right\"});\n        else if (s.match(/^\\s*:-+\\s*$/))  html_attrs.push({align: \"left\"});\n        else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({align: \"center\"});\n        else                              html_attrs.push({});\n    });\n\n    // now for the header, avoid escaped pipes\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n    for (i = 0; i < m[1].length; i++) {\n        table[1][1].push(['th', html_attrs[i] || {}].concat(\n            this.processInline(m[1][i].trim())));\n    }\n\n    // now for body contents\n    forEach (m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n        var html_row = ['tr'];\n        row = _split_on_unescaped(row, '|');\n        for (i = 0; i < row.length; i++) {\n            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n        }\n        table[2].push(html_row);\n    }, this);\n\n    return [table];\n}\n\nMarkdown.dialects.Maruku.inline[ \"{:\" ] = function inline_meta( text, matches, out ) {\n  if ( !out.length ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // get the preceeding element\n  var before = out[ out.length - 1 ];\n\n  if ( typeof before === \"string\" ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // match a meta hash\n  var m = text.match( /^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/ );\n\n  // no match, false alarm\n  if ( !m ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // attach the attributes to the preceeding element\n  var meta = this.dialect.processMetaHash( m[ 1 ] ),\n      attr = extract_attr( before );\n\n  if ( !attr ) {\n    attr = {};\n    before.splice( 1, 0, attr );\n  }\n\n  for ( var k in meta ) {\n    attr[ k ] = meta[ k ];\n  }\n\n  // cut out the string and replace it with nothing\n  return [ m[ 0 ].length, \"\" ];\n};\n\nMarkdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Maruku.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );\n\nvar isArray = Array.isArray || function(obj) {\n  return Object.prototype.toString.call(obj) == \"[object Array]\";\n};\n\nvar forEach;\n// Don't mess with Array.prototype. Its not friendly\nif ( Array.prototype.forEach ) {\n  forEach = function( arr, cb, thisp ) {\n    return arr.forEach( cb, thisp );\n  };\n}\nelse {\n  forEach = function(arr, cb, thisp) {\n    for (var i = 0; i < arr.length; i++) {\n      cb.call(thisp || arr, arr[i], i, arr);\n    }\n  }\n}\n\nvar isEmpty = function( obj ) {\n  for ( var key in obj ) {\n    if ( hasOwnProperty.call( obj, key ) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction extract_attr( jsonml ) {\n  return isArray(jsonml)\n      && jsonml.length > 1\n      && typeof jsonml[ 1 ] === \"object\"\n      && !( isArray(jsonml[ 1 ]) )\n      ? jsonml[ 1 ]\n      : undefined;\n}\n\n\n\n/**\n *  renderJsonML( jsonml[, options] ) -> String\n *  - jsonml (Array): JsonML array to render to XML\n *  - options (Object): options\n *\n *  Converts the given JsonML into well-formed XML.\n *\n *  The options currently understood are:\n *\n *  - root (Boolean): wether or not the root node should be included in the\n *    output, or just its children. The default `false` is to not include the\n *    root itself.\n */\nexpose.renderJsonML = function( jsonml, options ) {\n  options = options || {};\n  // include the root element in the rendered output?\n  options.root = options.root || false;\n\n  var content = [];\n\n  if ( options.root ) {\n    content.push( render_tree( jsonml ) );\n  }\n  else {\n    jsonml.shift(); // get rid of the tag\n    if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n      jsonml.shift(); // get rid of the attributes\n    }\n\n    while ( jsonml.length ) {\n      content.push( render_tree( jsonml.shift() ) );\n    }\n  }\n\n  return content.join( \"\\n\\n\" );\n};\n\nfunction escapeHTML( text ) {\n  return text.replace( /&/g, \"&amp;\" )\n             .replace( /</g, \"&lt;\" )\n             .replace( />/g, \"&gt;\" )\n             .replace( /\"/g, \"&quot;\" )\n             .replace( /'/g, \"&#39;\" );\n}\n\nfunction render_tree( jsonml ) {\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return escapeHTML( jsonml );\n  }\n\n  var tag = jsonml.shift(),\n      attributes = {},\n      content = [];\n\n  if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n    attributes = jsonml.shift();\n  }\n\n  while ( jsonml.length ) {\n    content.push( render_tree( jsonml.shift() ) );\n  }\n\n  var tag_attrs = \"\";\n  for ( var a in attributes ) {\n    tag_attrs += \" \" + a + '=\"' + escapeHTML( attributes[ a ] ) + '\"';\n  }\n\n  // be careful about adding whitespace here for inline elements\n  if ( tag == \"img\" || tag == \"br\" || tag == \"hr\" ) {\n    return \"<\"+ tag + tag_attrs + \"/>\";\n  }\n  else {\n    return \"<\"+ tag + tag_attrs + \">\" + content.join( \"\" ) + \"</\" + tag + \">\";\n  }\n}\n\nfunction convert_tree_to_html( tree, references, options ) {\n  var i;\n  options = options || {};\n\n  // shallow clone\n  var jsonml = tree.slice( 0 );\n\n  if ( typeof options.preprocessTreeNode === \"function\" ) {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n  }\n\n  // Clone attributes if they exist\n  var attrs = extract_attr( jsonml );\n  if ( attrs ) {\n    jsonml[ 1 ] = {};\n    for ( i in attrs ) {\n      jsonml[ 1 ][ i ] = attrs[ i ];\n    }\n    attrs = jsonml[ 1 ];\n  }\n\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return jsonml;\n  }\n\n  // convert this node\n  switch ( jsonml[ 0 ] ) {\n    case \"header\":\n      jsonml[ 0 ] = \"h\" + jsonml[ 1 ].level;\n      delete jsonml[ 1 ].level;\n      break;\n    case \"bulletlist\":\n      jsonml[ 0 ] = \"ul\";\n      break;\n    case \"numberlist\":\n      jsonml[ 0 ] = \"ol\";\n      break;\n    case \"listitem\":\n      jsonml[ 0 ] = \"li\";\n      break;\n    case \"para\":\n      jsonml[ 0 ] = \"p\";\n      break;\n    case \"markdown\":\n      jsonml[ 0 ] = \"html\";\n      if ( attrs ) delete attrs.references;\n      break;\n    case \"code_block\":\n      jsonml[ 0 ] = \"pre\";\n      i = attrs ? 2 : 1;\n      var code = [ \"code\" ];\n      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );\n      jsonml[ i ] = code;\n      break;\n    case \"inlinecode\":\n      jsonml[ 0 ] = \"code\";\n      break;\n    case \"img\":\n      jsonml[ 1 ].src = jsonml[ 1 ].href;\n      delete jsonml[ 1 ].href;\n      break;\n    case \"linebreak\":\n      jsonml[ 0 ] = \"br\";\n    break;\n    case \"link\":\n      jsonml[ 0 ] = \"a\";\n      break;\n    case \"link_ref\":\n      jsonml[ 0 ] = \"a\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.href = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n    case \"img_ref\":\n      jsonml[ 0 ] = \"img\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.src = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n  }\n\n  // convert all the children\n  i = 1;\n\n  // deal with the attribute node, if it exists\n  if ( attrs ) {\n    // if there are keys, skip over it\n    for ( var key in jsonml[ 1 ] ) {\n        i = 2;\n        break;\n    }\n    // if there aren't, remove it\n    if ( i === 1 ) {\n      jsonml.splice( i, 1 );\n    }\n  }\n\n  for ( ; i < jsonml.length; ++i ) {\n    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );\n  }\n\n  return jsonml;\n}\n\n\n// merges adjacent text nodes into a single node\nfunction merge_text_nodes( jsonml ) {\n  // skip the tag name and attribute hash\n  var i = extract_attr( jsonml ) ? 2 : 1;\n\n  while ( i < jsonml.length ) {\n    // if it's a string check the next item too\n    if ( typeof jsonml[ i ] === \"string\" ) {\n      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === \"string\" ) {\n        // merge the second string into the first and remove it\n        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];\n      }\n      else {\n        ++i;\n      }\n    }\n    // if it's not a string recurse\n    else {\n      merge_text_nodes( jsonml[ i ] );\n      ++i;\n    }\n  }\n}\n\n} )( (function() {\n  if ( typeof exports === \"undefined\" ) {\n    window.markdown = {};\n    return window.markdown;\n  }\n  else {\n    return exports;\n  }\n} )() );\n","// super simple module for the most common nodejs use case.\nexports.markdown = require(\"./markdown\");\nexports.parse = exports.markdown.toHTML;\n","// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue) {\n    'use strict';\n    var O = defined(this);\n    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}"],"sourceRoot":""}